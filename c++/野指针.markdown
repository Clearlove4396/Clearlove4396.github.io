## C++野指针

- 野指针：不同于空指针。野指针的值不为null，野指针会指向一段实际的内存，只是它指向哪里我们并不知道，或者是他指向的内存空间已经被释放。在实际中，无法通过指针判空去识别一个指针是否为野指针。

#### 产生的原因

1. 指针变量的值**未被初始化**：如果指针声明在全局数据区，则未初始化的指针缺省为空；如果声明在栈区，则该指针指向的地址空间随机。

2. 指针所指向的地址空间**被free或者delete**，在堆上malloc或者new出来的地址空间，如果已经free或delete，那么此时堆上的内存已经被释放，但是指向该内存的指针如果没有人为的修改过，那么指针还会继续指向这段堆上已经被释放的内存，这时还通过该指针去访问堆上的内存，就会造成不可预知的结果。此时指针也被称为**悬空指针**。

```C++
void func()
{
	int *ptr = new int[5];
	delete []ptr;
	// 执行完delete后，ptr野指针
	ptr = nullptr;  //delete之后应该置为nullptr
}
```

3. 指针操作超越了作用于

```C++
void func()
{
	int *ptr = nullptr;
	{
		int a = 10;
		ptr = &a;
	} // a的作用域到此结束

	int b = *ptr;    // ptr指向a，a已经被回收，ptr野指针  但是*ptr还是会返回10
}
```

- **个人理解**：野指针指向的空间可能被释放，或者越界，这是一种**逻辑上的实效**，不代表野指针不可以访问内存，比如上例，依然可以使用`int b = *ptr`语句进行赋值，虽然此时ptr是野指针（因为a的内存被释放了）。

